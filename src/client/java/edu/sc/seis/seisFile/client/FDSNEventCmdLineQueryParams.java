
package edu.sc.seis.seisFile.client;

import java.time.Instant;
import picocli.CommandLine.Option;

import edu.sc.seis.seisFile.*;
import edu.sc.seis.seisFile.fdsnws.FDSNEventQueryParams;

/** Autogenerated by groovy FDSNQueryParamGenerator.groovy in src/metacode/groovy
 */
public class FDSNEventCmdLineQueryParams {

    FDSNEventQueryParams queryParams;

    public FDSNEventCmdLineQueryParams() {
        this(FDSNEventQueryParams.USGS_HOST);
    }

    public FDSNEventCmdLineQueryParams(String host) {
        this.queryParams = new FDSNEventQueryParams();
        setHost(host==null ? FDSNEventQueryParams.USGS_HOST : host);
    }

    @Option(names = { "--host" }, description="host to connect to, defaults to ${DEFAULT-VALUE}", defaultValue=FDSNEventQueryParams.USGS_HOST)
    public FDSNEventQueryParams setHost(String host) {
        return this.queryParams.setHost(host);
    }

    @Option(names = "--port", description = "port to connect to, defaults to ${DEFAULT-VALUE}", defaultValue="80")
    public FDSNEventQueryParams setPort(int port) {
        return this.queryParams.setPort(port);
    }


    /** Limit to events on or after the specified start time.
     */
    @Option(names = { "-b","--starttime","--start" }, description="Limit to events on or after the specified start time.", converter=FloorISOTimeParser.class)
    public FDSNEventQueryParams setStartTime(Instant value) {
        queryParams.setStartTime(value);
        return queryParams;
    }


    /** Limit to events on or before the specified end time.
     */
    @Option(names = { "-e","--endtime","--end" }, description="Limit to events on or before the specified end time.", converter=CeilingISOTimeParser.class)
    public FDSNEventQueryParams setEndTime(Instant value) {
        queryParams.setEndTime(value);
        return queryParams;
    }


    /** Limit to events with a latitude larger than the specified minimum.
     */
    @Option(names = { "--minlatitude","--minlat" }, description="Limit to events with a latitude larger than the specified minimum.")
    public FDSNEventQueryParams setMinLatitude(float value) {
        queryParams.setMinLatitude(value);
        return queryParams;
    }


    /** Limit to events with a latitude smaller than the specified maximum.
     */
    @Option(names = { "--maxlatitude","--maxlat" }, description="Limit to events with a latitude smaller than the specified maximum.")
    public FDSNEventQueryParams setMaxLatitude(float value) {
        queryParams.setMaxLatitude(value);
        return queryParams;
    }


    /** Limit to events with a longitude larger than the specified minimum.
     */
    @Option(names = { "--minlongitude","--minlon" }, description="Limit to events with a longitude larger than the specified minimum.")
    public FDSNEventQueryParams setMinLongitude(float value) {
        queryParams.setMinLongitude(value);
        return queryParams;
    }


    /** Limit to events with a longitude smaller than the specified maximum.
     */
    @Option(names = { "--maxlongitude","--maxlon" }, description="Limit to events with a longitude smaller than the specified maximum.")
    public FDSNEventQueryParams setMaxLongitude(float value) {
        queryParams.setMaxLongitude(value);
        return queryParams;
    }


    /** Specify the latitude to be used for a radius search.
     */
    @Option(names = { "--latitude","--lat" }, description="Specify the latitude to be used for a radius search.")
    public FDSNEventQueryParams setLatitude(float value) {
        queryParams.setLatitude(value);
        return queryParams;
    }


    /** Specify the longitude to the used for a radius search.
     */
    @Option(names = { "--longitude","--lon" }, description="Specify the longitude to the used for a radius search.")
    public FDSNEventQueryParams setLongitude(float value) {
        queryParams.setLongitude(value);
        return queryParams;
    }


    /** Limit to events within the specified minimum number of degrees from the geographic point defined by the latitude and longitude parameters.
     */
    @Option(names = { "--minradius" }, description="Limit to events within the specified minimum number of degrees from the geographic point defined by the latitude and longitude parameters.")
    public FDSNEventQueryParams setMinRadius(float value) {
        queryParams.setMinRadius(value);
        return queryParams;
    }


    /** Limit to events within the specified maximum number of degrees from the geographic point defined by the latitude and longitude parameters.
     */
    @Option(names = { "--maxradius" }, description="Limit to events within the specified maximum number of degrees from the geographic point defined by the latitude and longitude parameters.")
    public FDSNEventQueryParams setMaxRadius(float value) {
        queryParams.setMaxRadius(value);
        return queryParams;
    }


    /** Limit to events with depth more than the specified minimum.
     */
    @Option(names = { "--mindepth" }, description="Limit to events with depth more than the specified minimum.")
    public FDSNEventQueryParams setMinDepth(float value) {
        queryParams.setMinDepth(value);
        return queryParams;
    }


    /** Limit to events with depth less than the specified maximum.
     */
    @Option(names = { "--maxdepth" }, description="Limit to events with depth less than the specified maximum.")
    public FDSNEventQueryParams setMaxDepth(float value) {
        queryParams.setMaxDepth(value);
        return queryParams;
    }


    /** Limit to events with a magnitude larger than the specified minimum.
     */
    @Option(names = { "--minmagnitude","--minmag" }, description="Limit to events with a magnitude larger than the specified minimum.")
    public FDSNEventQueryParams setMinMagnitude(float value) {
        queryParams.setMinMagnitude(value);
        return queryParams;
    }


    /** Limit to events with a magnitude smaller than the specified maximum.
     */
    @Option(names = { "--maxmagnitude","--maxmag" }, description="Limit to events with a magnitude smaller than the specified maximum.")
    public FDSNEventQueryParams setMaxMagnitude(float value) {
        queryParams.setMaxMagnitude(value);
        return queryParams;
    }


    /** Specify a magnitude type to use for testing the minimum and maximum limits.
     */
    @Option(names = { "-t","--magnitudetype","--magtype" }, description="Specify a magnitude type to use for testing the minimum and maximum limits.")
    public FDSNEventQueryParams setMagnitudeType(String value) {
        queryParams.setMagnitudeType(value);
        return queryParams;
    }


    /** Specify if all origins for the event should be included, default is data center dependent but is suggested to be the preferred origin only.
     */
    @Option(names = { "--includeallorigins" }, description="Specify if all origins for the event should be included, default is data center dependent but is suggested to be the preferred origin only.")
    public FDSNEventQueryParams setIncludeAllOrigins(boolean value) {
        queryParams.setIncludeAllOrigins(value);
        return queryParams;
    }


    /** Specify if all magnitudes for the event should be included, default is data center dependent but is suggested to be the preferred magnitude only.
     */
    @Option(names = { "--includeallmagnitudes" }, description="Specify if all magnitudes for the event should be included, default is data center dependent but is suggested to be the preferred magnitude only.")
    public FDSNEventQueryParams setIncludeAllMagnitudes(boolean value) {
        queryParams.setIncludeAllMagnitudes(value);
        return queryParams;
    }


    /** Specify if phase arrivals should be included.
     */
    @Option(names = { "--includearrivals" }, description="Specify if phase arrivals should be included.")
    public FDSNEventQueryParams setIncludeArrivals(boolean value) {
        queryParams.setIncludeArrivals(value);
        return queryParams;
    }


    /** Select a specific event by ID; event identifiers are data center specific.
     */
    @Option(names = { "--eventid" }, description="Select a specific event by ID; event identifiers are data center specific.")
    public FDSNEventQueryParams setEventid(String value) {
        queryParams.setEventid(value);
        return queryParams;
    }


    /** Limit the results to the specified number of events.
     */
    @Option(names = { "--limit" }, description="Limit the results to the specified number of events.")
    public FDSNEventQueryParams setLimit(int value) {
        queryParams.setLimit(value);
        return queryParams;
    }


    /** Return results starting at the event count specified, starting at 1.
     */
    @Option(names = { "--offset" }, description="Return results starting at the event count specified, starting at 1.")
    public FDSNEventQueryParams setOffset(int value) {
        queryParams.setOffset(value);
        return queryParams;
    }


    /** Order the result by time or magnitude with the following possibilities: time: order by origin descending time time-asc : order by origin ascending time magnitude: order by descending magnitude magnitude-asc : order by ascending magnitude
     */
    @Option(names = { "--orderby" }, description="Order the result by time or magnitude with the following possibilities: time: order by origin descending time time-asc : order by origin ascending time magnitude: order by descending magnitude magnitude-asc : order by ascending magnitude")
    public FDSNEventQueryParams setOrderBy(String value) {
        queryParams.setOrderBy(value);
        return queryParams;
    }


    /** Limit to events from a specified catalog
     */
    @Option(names = { "-c","--catalog" }, description="Limit to events from a specified catalog")
    public FDSNEventQueryParams setCatalog(String value) {
        queryParams.setCatalog(value);
        return queryParams;
    }


    /** Limit to events contributed by a specified contributor.
     */
    @Option(names = { "-C","--contributor" }, description="Limit to events contributed by a specified contributor.")
    public FDSNEventQueryParams setContributor(String value) {
        queryParams.setContributor(value);
        return queryParams;
    }


    /** Limit to events updated after the specified time.
     */
    @Option(names = { "--updatedafter" }, description="Limit to events updated after the specified time.", converter=FloorISOTimeParser.class)
    public FDSNEventQueryParams setUpdatedAfter(Instant value) {
        queryParams.setUpdatedAfter(value);
        return queryParams;
    }



        @Option(names = {"--box"}, description="constraining box as west/east/south/north", converter=BoxAreaParser.class)
        public FDSNEventQueryParams boxArea(BoxArea box) {
            return queryParams.boxArea(box);
        }

        public FDSNEventQueryParams area(float minLat, float maxLat, float minLon, float maxLon) {
            return queryParams.area( minLat, maxLat, minLon, maxLon);
        }

        public FDSNEventQueryParams ring(float lat, float lon, float maxRadius) {
            return queryParams.ring( lat,  lon,  maxRadius);
        }

        @Option(names = {"--donut"}, description="constraining donut as lat/lon/minRadius/maxRadius", converter=DonutParser.class)
        public FDSNEventQueryParams donut(DonutArea donut) {
            return queryParams.ring(donut.latitude, donut.longitude, donut.maxradius).setMinRadius(donut.minradius);
        }
    


    @Option(names={"-m", "--magnitude"}, arity="1..2", description="The range of acceptable magnitudes, max may be omitted.")
    public FDSNEventQueryParams setMagnitudeRange(float[] minmax) {
        if (minmax.length >1) {
            setMaxMagnitude(minmax[1]);
        }
        return setMinMagnitude(minmax[0]);
    }

    public String getServiceName() {
        return queryParams.getServiceName();
    }



    

}

