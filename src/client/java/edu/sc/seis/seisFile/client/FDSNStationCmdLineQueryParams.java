
package edu.sc.seis.seisFile.client;

import java.time.Instant;

import edu.sc.seis.seisFile.BoxArea;
import edu.sc.seis.seisFile.DonutArea;
import edu.sc.seis.seisFile.fdsnws.FDSNStationQueryParams;
import edu.sc.seis.seisFile.fdsnws.QueryLevel;
import picocli.CommandLine.Option;

/** Autogenerated by groovy FDSNQueryParamGenerator.groovy in src/metacode/groovy
 */
public class FDSNStationCmdLineQueryParams {

    FDSNStationQueryParams queryParams;

    public FDSNStationCmdLineQueryParams() {
        this(FDSNStationQueryParams.DEFAULT_HOST);
    }

    public FDSNStationCmdLineQueryParams(String host) {
        this.queryParams = new FDSNStationQueryParams();
        setHost(host==null ? FDSNStationQueryParams.DEFAULT_HOST : host);
    }

    @Option(names = { "--host" }, description="host to connect to, defaults to ${DEFAULT-VALUE}", defaultValue=FDSNStationQueryParams.DEFAULT_HOST)
    public FDSNStationQueryParams setHost(String host) {
        return this.queryParams.setHost(host);
    }

    @Option(names = "--port", description = "port to connect to, defaults to ${DEFAULT-VALUE}", defaultValue="80")
    public FDSNStationQueryParams setPort(int port) {
        return this.queryParams.setPort(port);
    }


    /** Limit to metadata epochs starting on or after the specified start time.
     */
    @Option(names = { "-b","--starttime","--start" }, description="Limit to metadata epochs starting on or after the specified start time.", converter=FloorISOTimeParser.class )
    public FDSNStationQueryParams setStartTime(Instant value) {
        queryParams.setStartTime(value);
        return queryParams;
    }


    /** Limit to metadata epochs ending on or before the specified end time.
     */
    @Option(names = { "-e","--endtime","--end" }, description="Limit to metadata epochs ending on or before the specified end time.", converter=CeilingISOTimeParser.class )
    public FDSNStationQueryParams setEndTime(Instant value) {
        queryParams.setEndTime(value);
        return queryParams;
    }


    /** Limit to metadata epochs starting before specified time.
     */
    @Option(names = { "--startbefore" }, description="Limit to metadata epochs starting before specified time.", converter=CeilingISOTimeParser.class )
    public FDSNStationQueryParams setStartBefore(Instant value) {
        queryParams.setStartBefore(value);
        return queryParams;
    }


    /** Limit to metadata epochs starting after specified time.
     */
    @Option(names = { "--startafter" }, description="Limit to metadata epochs starting after specified time.", converter=FloorISOTimeParser.class )
    public FDSNStationQueryParams setStartAfter(Instant value) {
        queryParams.setStartAfter(value);
        return queryParams;
    }


    /** Limit to metadata epochs ending before specified time.
     */
    @Option(names = { "--endbefore" }, description="Limit to metadata epochs ending before specified time.", converter=CeilingISOTimeParser.class )
    public FDSNStationQueryParams setEndBefore(Instant value) {
        queryParams.setEndBefore(value);
        return queryParams;
    }


    /** Limit to metadata epochs ending after specified time.
     */
    @Option(names = { "--endafter" }, description="Limit to metadata epochs ending after specified time.", converter=FloorISOTimeParser.class )
    public FDSNStationQueryParams setEndAfter(Instant value) {
        queryParams.setEndAfter(value);
        return queryParams;
    }



    @Option(names = { "-n","--network","--net" }, description="Select one or more network codes. Can be SEED network codes or data center defined codes. Multiple codes are comma-separated.", split = "," )
    public FDSNStationQueryParams setNetwork(String[] value) {
      queryParams.clearNetwork();
      for(String v: value) queryParams.appendToNetwork(v);
      return queryParams;
    }



    @Option(names = { "-s","--station","--sta" }, description="Select one or more SEED station codes. Multiple codes are comma-separated.", split = "," )
    public FDSNStationQueryParams setStation(String[] value) {
      queryParams.clearStation();
      for(String v: value) queryParams.appendToStation(v);
      return queryParams;
    }



    @Option(names = { "-l","--location","--loc" }, description="Select one or more SEED location identifiers. Multiple identifiers are comma-separated. As a special case -- (two dashes) will be translated to a string of two space characters to match blank location IDs.", split = "," )
    public FDSNStationQueryParams setLocation(String[] value) {
      queryParams.clearLocation();
      for(String v: value) queryParams.appendToLocation(v);
      return queryParams;
    }



    @Option(names = { "-c","--channel","--cha" }, description="Select one or more SEED channel codes. Multiple codes are comma-separated.", split = "," )
    public FDSNStationQueryParams setChannel(String[] value) {
      queryParams.clearChannel();
      for(String v: value) queryParams.appendToChannel(v);
      return queryParams;
    }


    /** Limit to stations with a latitude larger than the specified minimum.
     */
    @Option(names = { "--minlatitude","--minlat" }, description="Limit to stations with a latitude larger than the specified minimum." )
    public FDSNStationQueryParams setMinLatitude(float value) {
        queryParams.setMinLatitude(value);
        return queryParams;
    }


    /** Limit to stations with a latitude smaller than the specified maximum.
     */
    @Option(names = { "--maxlatitude","--maxlat" }, description="Limit to stations with a latitude smaller than the specified maximum." )
    public FDSNStationQueryParams setMaxLatitude(float value) {
        queryParams.setMaxLatitude(value);
        return queryParams;
    }


    /** Limit to stations with a longitude larger than the specified minimum.
     */
    @Option(names = { "--minlongitude","--minlon" }, description="Limit to stations with a longitude larger than the specified minimum." )
    public FDSNStationQueryParams setMinLongitude(float value) {
        queryParams.setMinLongitude(value);
        return queryParams;
    }


    /** Limit to stations with a longitude smaller than the specified maximum.
     */
    @Option(names = { "--maxlongitude","--maxlon" }, description="Limit to stations with a longitude smaller than the specified maximum." )
    public FDSNStationQueryParams setMaxLongitude(float value) {
        queryParams.setMaxLongitude(value);
        return queryParams;
    }


    /** Specify the latitude to be used for a radius search.
     */
    @Option(names = { "--latitude","--lat" }, description="Specify the latitude to be used for a radius search." )
    public FDSNStationQueryParams setLatitude(float value) {
        queryParams.setLatitude(value);
        return queryParams;
    }


    /** Specify the longitude to the used for a radius search.
     */
    @Option(names = { "--longitude","--lon" }, description="Specify the longitude to the used for a radius search." )
    public FDSNStationQueryParams setLongitude(float value) {
        queryParams.setLongitude(value);
        return queryParams;
    }


    /** Limit results to stations within the specified minimum number of degrees from the geographic point defined by the latitude and longitude parameters.
     */
    @Option(names = { "--minradius" }, description="Limit results to stations within the specified minimum number of degrees from the geographic point defined by the latitude and longitude parameters." )
    public FDSNStationQueryParams setMinRadius(float value) {
        queryParams.setMinRadius(value);
        return queryParams;
    }


    /** Limit results to stations within the specified maximum number of degrees from the geographic point defined by the latitude and longitude parameters.
     */
    @Option(names = { "--maxradius" }, description="Limit results to stations within the specified maximum number of degrees from the geographic point defined by the latitude and longitude parameters." )
    public FDSNStationQueryParams setMaxRadius(float value) {
        queryParams.setMaxRadius(value);
        return queryParams;
    }


    /** Specify the level of detail for the results.
     */
    @Option(names = { "-L","--level" }, description="Specify the level of detail for the results." )
    public FDSNStationQueryParams setLevel(QueryLevel value) {
        queryParams.setLevel(value.name());
        return queryParams;
    }


    /** Specify if results should include information for restricted stations.
     */
    @Option(names = { "--includerestricted" }, description="Specify if results should include information for restricted stations." )
    public FDSNStationQueryParams setIncludeRestricted(boolean value) {
        queryParams.setIncludeRestricted(value);
        return queryParams;
    }


    /** Specify if results should include information about time series data availability.
     */
    @Option(names = { "--includeavailability" }, description="Specify if results should include information about time series data availability." )
    public FDSNStationQueryParams setIncludeAvailability(boolean value) {
        queryParams.setIncludeAvailability(value);
        return queryParams;
    }


    /** Limit to metadata where selection criteria matches time series data availability.
     */
    @Option(names = { "--matchtimeseries" }, description="Limit to metadata where selection criteria matches time series data availability." )
    public FDSNStationQueryParams setMatchTimeseries(boolean value) {
        queryParams.setMatchTimeseries(value);
        return queryParams;
    }


    /** Limit to metadata updated after specified date; updates are data center specific.
     */
    @Option(names = { "--updatedafter" }, description="Limit to metadata updated after specified date; updates are data center specific.", converter=FloorISOTimeParser.class )
    public FDSNStationQueryParams setUpdatedAfter(Instant value) {
        queryParams.setUpdatedAfter(value);
        return queryParams;
    }



        @Option(names = {"--box"}, description="constraining box as west/east/south/north",
                converter=BoxAreaParser.class, paramLabel="w/e/s/n")
        public FDSNStationQueryParams boxArea(BoxArea box) {
            return queryParams.boxArea(box);
        }

        public FDSNStationQueryParams area(float minLat, float maxLat, float minLon, float maxLon) {
            return queryParams.area( minLat, maxLat, minLon, maxLon);
        }

        public FDSNStationQueryParams ring(float lat, float lon, float maxRadius) {
            return queryParams.ring( lat,  lon,  maxRadius);
        }

        @Option(names = {"--donut"}, description="constraining donut as lat/lon/minRadius/maxRadius",
                converter=DonutParser.class, paramLabel="lat/lon/min/max")
        public FDSNStationQueryParams donut(DonutArea donut) {
            return queryParams.ring(donut.latitude, donut.longitude, donut.maxradius).setMinRadius(donut.minradius);
        }
    


    public String getServiceName() {
        return queryParams.getServiceName();
    }



    

}

